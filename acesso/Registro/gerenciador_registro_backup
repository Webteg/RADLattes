##################################### PROJETOS DE PESQUISA #########################################
		camposTabela = ['proj_natureza', 'proj_titulo', 'proj_descricao', 'proj_ano_inicio', 'proj_ano_conclusao', 'proj_situacao']
		camposItem = ['projeto_id', 'professor_id', 'flag_tipo_participacao']
		valoresTabela = []
		valoresItem = []
	
		#Para cada projeto de pesquisa
		print "NOME COMPLETO", self.nomeCompleto		
		for item in registro.listaProjetoDePesquisa:
			valoresTabela.append(item.natureza.encode('utf8'))
			valoresTabela.append(item.nome.encode('utf8'))
			valoresTabela.append(item.descricao[0].encode('utf8'))
			valoresTabela.append(item.anoInicio)
			valoresTabela.append(item.anoConclusao.encode('utf8'))
			valoresTabela.append(item.situacao.encode('utf8'))

			size = len(item.integrantes)
			for i in range(size):
				if item.integrantes[i][0] in self.nomeCompleto:
					print item.integrantes[i][0]
					tipoParticipacao = item.integrantes.pop(i)[1].encode('utf8')
					break
			vazio = False
			if size == 0:
				tipoParticipacao = ''
				vazio = True

			criterio = Criteria()
			criterio.add(Filter('proj_titulo', '=', item.nome.encode('utf8')))
			criterio.add(Filter('proj_natureza', '=', item.natureza.encode('utf8')))
			criterio.add(Filter('proj_situacao', '=', item.situacao.encode('utf8')))

			self.sql_select.setCriteria(criterio)
			cursor.execute(self.instructionSQL(self.sql_select, 'projeto', ['projeto_id'], criterio))
			projeto_id = cursor.fetchone()
			
			#Se o projeto nao existe entao inserir
			if projeto_id == None:
				cursor.execute(self.instructionSQL(self.sql_insert, 'projeto', camposTabela, valoresTabela))
				self.conn.commit()
				cursor.execute(self.instructionSQL(self.sql_select, 'projeto', ['projeto_id'], criterio))
				projeto_id = cursor.fetchone()[0]
				
				valoresItem.append(projeto_id)
				valoresItem.append(professor_id)
				if not vazio:
					valoresItem.append(tipoParticipacao)
				else:
					valoresItem.append(tipoParticipacao)

				sql = self.instructionSQL(self.sql_insert, 'item_projeto', camposItem, valoresItem)
				cursor.execute(sql)
				self.conn.commit()

				print 'Inserido ...'

			else:
				flag_associado = False
				#Consulta os professores associados a um projeto
				criterio2 = Criteria()
				criterio2.add(Filter('projeto_id', '=', projeto_id[0]))
				cursor.execute(self.instructionSQL(self.sql_select, 'item_projeto', ['professor_id'], criterio2))
				setResult = cursor.fetchall()
				#Se o ID do professor ja estiver associado ao projeto
				for result in setResult:
					if result[0] == professor_id:
						flag_associado = True
						break
				#Se nao estiver adiciona um registro a tabela item_projeto
				if not flag_associado:			
					valoresItem.append(projeto_id[0])
					valoresItem.append(professor_id)
					if not vazio:
						valoresItem.append(tipoParticipacao)
					else:
						valoresItem.append(tipoParticipacao)

					sql = self.instructionSQL(self.sql_insert, 'item_projeto', camposItem, valoresItem)
					cursor.execute(sql)
					self.conn.commit()
			valoresItem = []
			valoresTabela = []

		#inserirProducao(lista): 
		############################################ PRODUCAO ###############################################
		camposTabela = ['prod_titulo', 'prod_revista', 'prod_ano', 'prod_numero', 'professor_id', 'flag_tipo']
		camposItem = ['producao_id', 'professor_id', 'flag_tipo'] 
		valoresTabela = []
		valoresItem   = []

		#ARTIGO EM PERIODICO
		print '######################IMPORTANDO - ARTIGOS EM PERIODICO#########################'
		print "NOME COMPLETO", self.nomeCompleto
		for item in registro.listaArtigoEmPeriodico:
			valoresTabela.append(item.titulo.encode('utf8'))
			valoresTabela.append(item.revista.encode('utf8'))
			valoresTabela.append(item.ano)
			valoresTabela.append(item.numero.encode('utf8'))

			#Verifica se a producao ja existe na base
			criterio = Criteria()
			criterio.add(Filter('prod_titulo', '=', self.sql_insert.addSlashes(item.titulo.encode('utf8'))))
			criterio.add(Filter('prod_revista', '=', item.revista.encode('utf8')))
			self.sql_select.setTable('producao_bibliografica')
			cursor.execute(self.instructionSQL(self.sql_select, 'producao_bibliografica', ['producao_id'], criterio))
			producao_id = cursor.fetchone()
			
			#Se a producao nao existe
			if producao_id == None:
				#Insere a producao
				valoresTabela.append(professor_id)
				valoresTabela.append(item.tipoProducao)
				cursor.execute(self.instructionSQL(self.sql_insert, 'producao_bibliografica', camposTabela, valoresTabela))
				self.conn.commit()

				#Consulta o ID da producao pelo titulo
				cursor.execute(self.instructionSQL(self.sql_select, 'producao_bibliografica', ['producao_id'], criterio))
				producao_id = cursor.fetchone()[0]
				
				#Insere um item de producao na tabela item_producao
				valoresItem.append(producao_id)
				valoresItem.append(professor_id)
				valoresItem.append(item.tipoProducao)
				sql = self.instructionSQL(self.sql_insert, 'item_producao', camposItem, valoresItem)
				cursor.execute(sql)
				self.conn.commit()
				print ('Inserido ...')
			else:
				flag_associado = False
				#Consulta os professores associados a uma producao
				criterio2 = Criteria()
				criterio2.add(Filter('producao_id', '=', producao_id[0]))
				cursor.execute(self.instructionSQL(self.sql_select, 'item_producao', ['professor_id'], criterio2))
				setResult = cursor.fetchall()
				#Se o ID do professor ja estiver associado ao projeto
				for result in setResult:
					if result[0] == professor_id:
						flag_associado = True
						break
				#Se nao estiver adiciona um registro a tabela item_producao
				if not flag_associado:			
					valoresItem.append(producao_id[0])
					valoresItem.append(professor_id)
					valoresItem.append(item.tipoProducao)
					sql = self.instructionSQL(self.sql_insert, 'item_producao', camposItem, valoresItem)
					cursor.execute(sql)
					self.conn.commit()
					print ('Inserido ...')
				else:
					print 'Ja existe ...', item.titulo, item.tipoProducao
			valoresTabela = []
			valoresItem = []
		
		#PRODUCAO BIBLIOGRAFICA
		camposTabela = ['prod_titulo', 'prod_ano', 'prod_volume', 'prod_paginas', 'prod_local', 'prod_edicao', 'prod_editora', 'prod_livro', 'prod_nome_jornal', 'prod_data', 'prod_nome_evento', 'prod_titulo_anais', 'prod_numero', 'prod_revista', 'prod_natureza', 'professor_id', 'flag_tipo']
		camposItem = ['producao_id', 'professor_id', 'flag_tipo']	
		valoresTabela = []
		valoresItem   = []

		listaProducaoBibliografica = []
		listaProducaoBibliografica.extend(registro.listaLivroPublicado)
		listaProducaoBibliografica.extend(registro.listaCapituloDeLivroPublicado)
		listaProducaoBibliografica.extend(registro.listaTextoEmJornalDeNoticia)
		listaProducaoBibliografica.extend(registro.listaTrabalhoCompletoEmCongresso)
		listaProducaoBibliografica.extend(registro.listaResumoExpandidoEmCongresso)
		listaProducaoBibliografica.extend(registro.listaResumoEmCongresso)
		listaProducaoBibliografica.extend(registro.listaArtigoAceito)
		listaProducaoBibliografica.extend(registro.listaApresentacaoDeTrabalho)
		listaProducaoBibliografica.extend(registro.listaOutroTipoDeProducaoBibliografica)
		print '####################IMPORTANDO - CAPITULO/LIVROS PUBLICADO######################'
		print "NOME COMPLETO", self.nomeCompleto
		for item in listaProducaoBibliografica:	
			valoresTabela.append(item.titulo.encode('utf8'))
			valoresTabela.append(item.ano.encode('utf8'))

			if isinstance(item, OutroTipoDeProducaoBibliografica):
				for i in range(12):
					valoresTabela.append('')
				valoresTabela.append(item.natureza.encode('utf8'))
				continue
			
			valoresTabela.append(item.volume.encode('utf8'))
			valoresTabela.append(item.paginas.encode('utf8'))
			
			if  isinstance(item, CapituloDeLivroPublicado):
				valoresTabela.append(item.local.encode('utf8'))
				valoresTabela.append(item.edicao.encode('utf8'))
				valoresTabela.append(item.editora.encode('utf8'))
				valoresTabela.append(item.livro.encode('utf8'))
				for i in range(7):
					valoresTabela.append('')
			elif isinstance(item, TextoEmJornalDeNoticia):
				valoresTabela.append(item.local.encode('utf8'))		
				for i in range(3):
					valoresTabela.append('')
				valoresTabela.append(item.nomeJornal.encode('utf8'))
				valoresTabela.append(item.data.encode('utf8'))
				for i in range(5):
					valoresTabela.append('')
			elif isinstance(item, ResumoExpandidoEmCongresso) or isinstance(item, ResumoEmCongresso):
				valoresTabela.append(item.localDoEvento.encode('utf8'))
				for i in range(5):
					valoresTabela.append('')

				valoresTabela.append(item.nomeDoEvento.encode('utf8'))
				if item.tituloDosAnais == None:
					valoresTabela.append('')
				else:
					valoresTabela.append(item.tituloDosAnais.encode('utf8'))

				if isinstance(item, ResumoEmCongresso):
					valoresTabela.append(item.numero.encode('utf8'))
					for i in range(2):
						valoresTabela.append('')
				else:
					for i in range(3):
						valoresTabela.append('')
	
			elif isinstance(item, ArtigoAceito):
				for i in range(8):
					valoresTabela.append('')
				valoresTabela.append(item.numero)
				valoresTabela.append(item.revista.encode('utf8'))
				for i in range(1):
					valoresTabela.append('')

			elif isinstance(item, ApresentacaoDeTrabalho) or isinstance(item, OutroTipoDeProducaoBibliografica):
				for i in range(10):
					valoresTabela.append('')
				valoresTabela.append(item.natureza.encode('utf8'))
			else:
				for i in range(11):
					valoresTabela.append('')

			criterio = Criteria()
			criterio.add(Filter('prod_titulo', '=', self.sql_insert.addSlashes(item.titulo.encode('utf8'))))
			criterio.add(Filter('prod_ano', '=', self.sql_insert.addSlashes(item.ano.encode('utf8'))))
			self.sql_select.setTable('producao_bibliografica')
			cursor.execute(self.instructionSQL(self.sql_select, 'producao_bibliografica', ['producao_id'], criterio))
			producao_id = cursor.fetchone()
		
			#Se a producao nao existe
			if producao_id == None:
				#Insere a producao
				valoresTabela.append(professor_id)
				valoresTabela.append(item.tipoProducao)
				cursor.execute(self.instructionSQL(self.sql_insert, 'producao_bibliografica', camposTabela, valoresTabela))
				self.conn.commit()

				#Consulta o ID da producao pelo titulo
				cursor.execute(self.instructionSQL(self.sql_select, 'producao_bibliografica', ['producao_id'], criterio))
				producao_id = cursor.fetchone()[0]
				
				#Insere um item de producao
				valoresItem.append(producao_id)
				valoresItem.append(professor_id)
				valoresItem.append(item.tipoProducao)
				sql = self.instructionSQL(self.sql_insert, 'item_producao', camposItem, valoresItem)
				cursor.execute(sql)
				self.conn.commit()

				print 'Inserido ...'
			else:
				flag_associado = False
				#Consulta os professores associados a uma producao
				criterio2 = Criteria()
				criterio2.add(Filter('producao_id', '=', producao_id[0]))
				cursor.execute(self.instructionSQL(self.sql_select, 'item_producao', ['professor_id'], criterio2))
				setResult = cursor.fetchall()
				#Se o ID do professor ja estiver associado ao projeto
				for result in setResult:
					if result[0] == professor_id:
						flag_associado = True
						break
				#Se nao estiver adiciona um registro a tabela item_producao
				if not flag_associado:			
					valoresItem.append(producao_id[0])
					valoresItem.append(professor_id)
					valoresItem.append(item.tipoProducao)
					sql = self.instructionSQL(self.sql_insert, 'item_producao', camposItem, valoresItem)
					cursor.execute(sql)
					self.conn.commit()
					print ('Inserido ...')
				else:
					print 'Ja existe ...', item.titulo, item.tipoProducao
		
			valoresTabela = []
			valoresItem = []

		############################################ PRODUCAO ARTISTICA E TECNICA###############################################
		#Software com patentes
		camposTabela = ['prod_tec_titulo', 'prod_tec_ano', 'prod_tec_natureza', 'professor_id']
		camposItem = ['partist_tecnica_id', 'professor_id', 'flag_tipo']
		valoresTabela = []
		valoresItem   = []

		producao_artistica_tecnica = []
		producao_artistica_tecnica.extend(registro.listaSoftwareComPatente)
		producao_artistica_tecnica.extend(registro.listaSoftwareSemPatente)
		producao_artistica_tecnica.extend(registro.listaProdutoTecnologico)
		producao_artistica_tecnica.extend(registro.listaProcessoOuTecnica)
		producao_artistica_tecnica.extend(registro.listaOutroTipoDeProducaoTecnica)
		producao_artistica_tecnica.extend(registro.listaProducaoArtistica)

		print 'PRODUCAO ARTISTICA E TECNICA', self.nomeCompleto
		for item in producao_artistica_tecnica:
			valoresTabela.append(item.titulo.encode('utf8'))
			valoresTabela.append(item.ano.encode('utf8'))
			if not item.natureza == None: 
				valoresTabela.append(item.natureza.encode('utf8'))
			else:
				valoresTabela.append(item.tipo.encode('utf8'))

			criterio = Criteria()
			criterio.add(Filter('prod_tec_titulo', '=', self.sql_insert.addSlashes(item.titulo.encode('utf8'))))
			criterio.add(Filter('prod_tec_ano', '=', item.ano.encode('utf8')))
			sql = self.instructionSQL(self.sql_select, 'partistica_tecnica', ['producao_tecnica_id'], criterio)
			cursor.execute(sql)
			producao_id = cursor.fetchone()
			if producao_id == None:
				valoresTabela.append(professor_id)
				cursor.execute(self.instructionSQL(self.sql_insert, 'partistica_tecnica', camposTabela, valoresTabela))
				self.conn.commit()

				cursor.execute(self.instructionSQL(self.sql_select, 'partistica_tecnica', ['producao_tecnica_id'], criterio))
				producao_id = cursor.fetchone()[0]
				
				valoresItem.append(producao_id)
				valoresItem.append(professor_id)
				valoresItem.append(item.tipo)
				sql = self.instructionSQL(self.sql_insert, 'item_partistica_tecnica', camposItem, valoresItem)
				cursor.execute(sql)
				self.conn.commit()

				print 'Inserido ...'
			else:
				flag_associado = False
				#Consulta os professores associados a uma producao
				criterio2 = Criteria()
				criterio2.add(Filter('partist_tecnica_id', '=', producao_id[0]))
				cursor.execute(self.instructionSQL(self.sql_select, 'item_partistica_tecnica', ['professor_id'], criterio2))
				setResult = cursor.fetchall()
				#Se o ID do professor ja estiver associado ao projeto
				for result in setResult:
					if result[0] == professor_id:
						flag_associado = True
						break
				#Se nao estiver adiciona um registro a tabela item_producao
				if not flag_associado:			
					valoresItem.append(producao_id[0])
					valoresItem.append(professor_id)
					valoresItem.append(item.tipo)
					sql = self.instructionSQL(self.sql_insert, 'item_partistica_tecnica', camposItem, valoresItem)
					cursor.execute(sql)
					self.conn.commit()
					print ('Inserido ...')
				else:
					print 'Ja existe ...', item.titulo, item.tipo
		
			valoresTabela = []
			valoresItem = []

		############################################ ORIENTACOES ###############################################
		camposTabela = ['orientacao_nome', 'orientacao_titulo_trabalho', 'orientacao_instituicao', 'orientacao_curso', 'orientacao_inicio', 'orientacao_agencia', 'orientacao_tipo', 'orientacao_tipo_trabalho', 'professor_id']
		camposItem = ['orientacao_id', 'professor_id']
		valoresTabela = []
		valoresItem   = []

		listaOrientacaoAndamento = []
		listaOrientacaoConcluida = []
		
		# Orientacoes em andamento
		listaOrientacaoAndamento.extend(registro.listaOASupervisaoDePosDoutorado)
		listaOrientacaoAndamento.extend(registro.listaOATeseDeDoutorado)
		listaOrientacaoAndamento.extend(registro.listaOADissertacaoDeMestrado)
		listaOrientacaoAndamento.extend(registro.listaOAMonografiaDeEspecializacao)
		listaOrientacaoAndamento.extend(registro.listaOATCC)
		listaOrientacaoAndamento.extend(registro.listaOAIniciacaoCientifica)
		listaOrientacaoAndamento.extend(registro.listaOAOutroTipoDeOrientacao)

		print "ORIENTACOES EM ANDAMENTO", self.nomeCompleto
		cursor = self.conn.cursor()
		for item in listaOrientacaoAndamento:
			valoresTabela.append(item.nome.encode('utf8'))
			valoresTabela.append(item.tituloDoTrabalho.encode('utf8'))
			valoresTabela.append(item.instituicao.encode('utf8'))
			valoresTabela.append(item.curso.encode('utf8'))
			valoresTabela.append(item.ano.encode('utf8'))
			valoresTabela.append(item.agenciaDeFomento.encode('utf8'))
			valoresTabela.append(item.tipoDeOrientacao.encode('utf8'))
			valoresTabela.append(item.tipoTrabalho.encode('utf8'))

			criterio = Criteria()
			criterio.add(Filter('orientacao_titulo_trabalho', '=', self.sql_insert.addSlashes(item.tituloDoTrabalho.encode('utf8'))))
			criterio.add(Filter('orientacao_inicio', '=', self.sql_insert.addSlashes(item.ano.encode('utf8'))))
			sql = self.instructionSQL(self.sql_select, 'orientacao', ['orientacao_id'], criterio)
			cursor.execute(sql)
			orientacao_id = cursor.fetchone()

			# Passar um lista e um criterio e receber um ID: existRecord(TableValues, Criteria): field
			if orientacao_id == None:
				valoresTabela.append(professor_id)
				cursor.execute(self.instructionSQL(self.sql_insert, 'orientacao', camposTabela, valoresTabela))
				self.conn.commit()

				cursor.execute(self.instructionSQL(self.sql_select, 'orientacao', ['orientacao_id'], criterio))
				orientacao_id = cursor.fetchone()

				valoresItem.append(orientacao_id)
				valoresItem.append(professor_id)
				sql = self.instructionSQL(self.sql_insert, 'item_orientacao', camposItem, valoresItem)
				cursor.execute(sql)
				self.conn.commit()

				print 'Inserido ...'
			
			else:
				flag_associado = False
				#Consulta os professores associados a uma producao
				criterio2 = Criteria()
				criterio2.add(Filter('orientacao_id', '=', orientacao_id[0]))
				cursor.execute(self.instructionSQL(self.sql_select, 'item_orientacao', ['professor_id'], criterio2))
				setResult = cursor.fetchall()
				#Se o ID do professor ja estiver associado ao projeto
				for result in setResult:
					if result[0] == professor_id:
						flag_associado = True
						break
				#Se nao estiver adiciona um registro a tabela item_producao
				if not flag_associado:			
					valoresItem.append(orientacao_id[0])
					valoresItem.append(professor_id)
					sql = self.instructionSQL(self.sql_insert, 'item_orientacao', camposItem, valoresItem)
					cursor.execute(sql)
					self.conn.commit()
					print ('Inserido ...')
				else:
					print 'Ja existe ...', item.tituloDoTrabalho
		
			valoresTabela = []
			valoresItem = []

		# Orientacoes concluidas
		camposTabela = ['orientacao_nome', 'orientacao_titulo_trabalho', 'orientacao_instituicao', 'orientacao_curso', 'orientacao_fim', 'orientacao_agencia', 'orientacao_tipo', 'orientacao_tipo_trabalho', 'professor_id']
		camposItem = ['orientacao_id', 'professor_id']
		valoresTabela = []
		valoresItem   = []
		
		listaOrientacaoConcluida = []
		listaOrientacaoConcluida.extend(registro.listaOCSupervisaoDePosDoutorado)	
		listaOrientacaoConcluida.extend(registro.listaOCTeseDeDoutorado)
		listaOrientacaoConcluida.extend(registro.listaOCDissertacaoDeMestrado)
		listaOrientacaoConcluida.extend(registro.listaOCMonografiaDeEspecializacao)
		listaOrientacaoConcluida.extend(registro.listaOCTCC)
		listaOrientacaoConcluida.extend(registro.listaOCIniciacaoCientifica)
		listaOrientacaoConcluida.extend(registro.listaOCOutroTipoDeOrientacao)

		print "ORIENTACOES CONCLUIDAS :", self.nomeCompleto
		for item in listaOrientacaoConcluida:
			valoresTabela.append(item.nome.encode('utf8'))
			valoresTabela.append(item.tituloDoTrabalho.encode('utf8'))
			valoresTabela.append(item.instituicao.encode('utf8'))
			valoresTabela.append(item.curso.encode('utf8'))
			valoresTabela.append(item.ano.encode('utf8'))
			valoresTabela.append(item.agenciaDeFomento.encode('utf8'))
			valoresTabela.append(item.tipoDeOrientacao.encode('utf8'))
			valoresTabela.append(item.tipoTrabalho.encode('utf8'))

			criterio = Criteria()
			criterio.add(Filter('orientacao_titulo_trabalho', '=', self.sql_insert.addSlashes(item.tituloDoTrabalho.encode('utf8'))))
			criterio.add(Filter('orientacao_fim', '=', self.sql_insert.addSlashes(item.ano.encode('utf8'))))
			criterio.add(Filter('orientacao_nome', '=', self.sql_insert.addSlashes(item.nome.encode('utf8'))))
			sql = self.instructionSQL(self.sql_select, 'orientacao', ['orientacao_id'], criterio)
			cursor.execute(sql)
			orientacao_id = cursor.fetchone()

			# Passar um lista e um criterio e receber um ID: existRecord(TableValues, Criteria): field
			if orientacao_id == None:
				valoresTabela.append(professor_id)
				cursor.execute(self.instructionSQL(self.sql_insert, 'orientacao', camposTabela, valoresTabela))
				self.conn.commit()

				cursor.execute(self.instructionSQL(self.sql_select, 'orientacao', ['orientacao_id'], criterio))
				orientacao_id = cursor.fetchone()[0]

				valoresItem.append(orientacao_id)
				valoresItem.append(professor_id)
				sql = self.instructionSQL(self.sql_insert, 'item_orientacao', camposItem, valoresItem)
				cursor.execute(sql)
				self.conn.commit()

				print 'Inserido ...'
			
			else:
				flag_associado = False
				#Consulta os professores associados a uma producao
				criterio2 = Criteria()
				criterio2.add(Filter('orientacao_id', '=', orientacao_id[0]))
				cursor.execute(self.instructionSQL(self.sql_select, 'item_orientacao', ['professor_id'], criterio2))
				setResult = cursor.fetchall()
				#Se o ID do professor ja estiver associado ao projeto
				for result in setResult:
					if result[0] == professor_id:
						flag_associado = True
						break
				#Se nao estiver adiciona um registro a tabela item_producao
				if not flag_associado:			
					valoresItem.append(orientacao_id[0])
					valoresItem.append(professor_id)
					sql = self.instructionSQL(self.sql_insert, 'item_orientacao', camposItem, valoresItem)
					cursor.execute(sql)
					self.conn.commit()
					print ('Inserido ...')
				else:
					print 'Ja existe ...', item.nome
		
			valoresTabela = []
			valoresItem = []

		############################################ EVENTOS ###############################################
		# Eventos
		camposTabela = ['evento_ano', 'evento_nome', 'evento_natureza', 'professor_id']
		camposItem = ['evento_id', 'professor_id', 'flag_tipo']
		valoresTabela = []
		valoresItem   = []

		eventos = []
		eventos.extend(registro.listaParticipacaoEmEvento)
		eventos.extend(registro.listaOrganizacaoDeEvento)
		
		print "NOME COMPLETO", self.nomeCompleto
		for item in eventos:
			valoresTabela.append(item.ano)
			valoresTabela.append(item.nomeDoEvento.encode('utf8'))
			valoresTabela.append(item.natureza.encode('utf8'))
			print 'aqui', item.natureza
			criterio = Criteria()
			criterio.add(Filter('evento_nome', '=', self.sql_insert.addSlashes(item.nomeDoEvento.encode('utf8'))))
			criterio.add(Filter('evento_ano', '=', self.sql_insert.addSlashes(item.ano.encode('utf8'))))
			
			sql = self.instructionSQL(self.sql_select, 'eventos', ['evento_id'], criterio)
			cursor.execute(sql)
			evento_id = cursor.fetchone()

			#Item ainda nao existe no banco de dados
			if evento_id == None:
	
				valoresTabela.append(professor_id)
				cursor.execute(self.instructionSQL(self.sql_insert, 'eventos', camposTabela, valoresTabela))
				self.conn.commit()

				cursor.execute(self.instructionSQL(self.sql_select, 'eventos', ['evento_id'], criterio))
				evento_id = cursor.fetchone()[0]

				valoresItem.append(evento_id)
				valoresItem.append(professor_id)
				valoresItem.append(item.tipo)

				sql = self.instructionSQL(self.sql_insert, 'item_evento', camposItem, valoresItem)
				cursor.execute(sql)
				self.conn.commit()

				print 'Inserido ...'
			else:
				flag_associado = False
				#Consulta os professores associados a uma producao
				criterio2 = Criteria()
				criterio2.add(Filter('evento_id', '=', evento_id[0]))
				cursor.execute(self.instructionSQL(self.sql_select, 'item_evento', ['professor_id'], criterio2))
				setResult = cursor.fetchall()
				#Se o ID do professor ja estiver associado ao projeto
				for result in setResult:
					if result[0] == professor_id:
						flag_associado = True
						break
				#Se nao estiver adiciona um registro a tabela item_producao
				if not flag_associado:			
					valoresItem.append(evento_id[0])
					valoresItem.append(professor_id)
					valoresItem.append(item.tipo)
					sql = self.instructionSQL(self.sql_insert, 'item_evento', camposItem, valoresItem)
					cursor.execute(sql)
					self.conn.commit()
					print ('Inserido ...')
				else:
					print 'Ja existe ...', item.nomeDoEvento
					
			valoresTabela = []
			valoresItem = []
		
		############################################ BANCAS ###############################################
		camposTabela = ['banca_nivel', 'banca_titulo', 'banca_ano', 'banca_local', 'professor_id']
		camposItem = ['banca_id', 'professor_id', 'flag_tipo']
		valoresTabela = []
		valoresItem   = []

		banca = []
		banca.extend(registro.listaBancaTrabalhoConclusao)
		banca.extend(registro.listaBancaConcurso)
		cursor= self.conn.cursor()
		print 'BANCAS  :', self.nomeCompleto
		for item in banca:
			valoresTabela.append(item.nivel.encode('utf8'))
			valoresTabela.append(item.titulo.encode('utf8'))
			valoresTabela.append(item.ano.encode('utf8'))
			valoresTabela.append(item.local.encode('utf8'))

			criterio = Criteria()
			criterio.add(Filter('banca_titulo', '=', self.sql_insert.addSlashes(item.titulo.encode('utf8'))))
			criterio.add(Filter('banca_ano', '=', self.sql_insert.addSlashes(item.ano.encode('utf8'))))
			
			sql = self.instructionSQL(self.sql_select, 'banca', ['banca_id'], criterio)
			cursor.execute(sql)
			banca_id = cursor.fetchone()
	
			if banca_id == None:
				valoresTabela.append(professor_id)
				cursor.execute(self.instructionSQL(self.sql_insert, 'banca', camposTabela, valoresTabela))
				self.conn.commit()

				cursor.execute(self.instructionSQL(self.sql_select, 'banca', ['banca_id'], criterio))
				banca_id = cursor.fetchone()[0]

				valoresItem.append(banca_id)
				valoresItem.append(professor_id)
				valoresItem.append(item.nivel.encode('utf8'))

				sql = self.instructionSQL(self.sql_insert, 'item_banca', camposItem, valoresItem)
				cursor.execute(sql)
				self.conn.commit()

				print 'Inserido ...'
			else:
				flag_associado = False
				#Consulta os professores associados a uma producao
				criterio2 = Criteria()
				criterio2.add(Filter('banca_id', '=', banca_id[0]))
				cursor.execute(self.instructionSQL(self.sql_select, 'item_banca', ['professor_id'], criterio2))
				setResult = cursor.fetchall()
				#Se o ID do professor ja estiver associado ao projeto
				for result in setResult:
					if result[0] == professor_id:
						flag_associado = True
						break
				#Se nao estiver adiciona um registro a tabela item_producao
				if not flag_associado:			
					valoresItem.append(banca_id[0])
					valoresItem.append(professor_id)
					valoresItem.append(item.nivel.encode('utf8'))
					sql = self.instructionSQL(self.sql_insert, 'item_banca', camposItem, valoresItem)
					cursor.execute(sql)
					self.conn.commit()
					print ('Inserido ...')
				else:
					print 'Ja existe ...', item.titulo
					
			valoresTabela = []
			valoresItem = []

		cursor.close()
		self.conn.close()
		
		# -----------------------------------------------------------------------------------------
		
	

		self.listaPremioOuTitulo       = self.filtrarItems(self.listaPremioOuTitulo)
		self.listaProjetoDePesquisa    = self.filtrarItems(self.listaProjetoDePesquisa)
		
		self.listaParticipacaoEmEvento = self.filtrarItems(self.listaParticipacaoEmEvento)
		self.listaOrganizacaoDeEvento  = self.filtrarItems(self.listaOrganizacaoDeEvento)


	def filtrarItems(self, lista):
		for i  in range(0, len(lista)):
			if not self.estaDentroDoPeriodo( lista[i] ):
				lista[i] = None
		lista = [l for l in lista if l is not None] # Eliminamos os elementos' None'
		
		# ORDENAR A LISTA POR ANO? QUE TAL? rpta. Nao necessario!
		return lista

		
	def estaDentroDoPeriodo(self, objeto):
		if objeto.__module__=='orientacaoEmAndamento':
			objeto.ano = int(objeto.ano)
			if objeto.ano > self.itemsAteOAno:
				return 0
			else:
				return 1

		elif objeto.__module__=='projetoDePesquisa':
			if objeto.anoConclusao.lower()=='atual':
				objeto.anoConclusao = str(datetime.datetime.now().year)

			if objeto.anoInicio=='': # Para projetos de pesquisa sem anos! (sim... tem gente que nao coloca os anos!)
				objeto.anoInicio='0'
			if objeto.anoConclusao=='':
				objeto.anoConclusao='0'

			objeto.anoInicio = int(objeto.anoInicio)
			objeto.anoConclusao = int(objeto.anoConclusao)
			objeto.ano = objeto.anoInicio # Para comparacao entre projetos
			
			if objeto.anoInicio>self.itemsAteOAno and objeto.anoConclusao>self.itemsAteOAno or objeto.anoInicio<self.itemsDesdeOAno and objeto.anoConclusao<self.itemsDesdeOAno:
				return 0
			else:
				fora = 0
				for per in self.listaPeriodo:
					if objeto.anoInicio>per[1] and objeto.anoConclusao>per[1] or objeto.anoInicio<per[0] and objeto.anoConclusao<per[0]:
						fora += 1
				if fora==len(self.listaPeriodo):
					return 0
				else:
					return 1

		else:
			if not objeto.ano.isdigit(): # se nao for identificado o ano sempre o mostramos na lista
				objeto.ano = 0
				return 1
			else:
				objeto.ano = int(objeto.ano)
				if self.itemsDesdeOAno > objeto.ano or objeto.ano > self.itemsAteOAno:
					return 0
				else:
					retorno = 0
					for per in self.listaPeriodo:
						if per[0]<=objeto.ano and objeto.ano<=per[1]:
							retorno = 1
							break
					return retorno

